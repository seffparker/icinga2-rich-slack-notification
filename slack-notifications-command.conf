object NotificationCommand "slack-notifications-command" {
  import "plugin-notification-command"
    
  command = {{
    var slack_webhook_url = macro("$slack_notifications_webhook_url$")
        if ( slack_webhook_url == null) {
                log(LogDebug, "slack-notifications","webhook_url not set, aborting...")
                return
        }
    log(LogDebug, "slack-notifications", "Sending notification...reading user configuration")
    var plugin_output_max_length_from_config = macro("$slack_notifications_plugin_output_max_length$")
    var plugin_output_max_length = Math.round(plugin_output_max_length_from_config)
    var slack_channel = macro("$slack_notifications_channel$")
    var slack_botname = macro("$slack_notifications_botname$")
    var icinga2_base_url = macro("$slack_notifications_icinga2_base_url$")
    var slack_icon_dictionary = macro("$slack_notifications_icon_dictionary$")
    var slack_color = macro("$slack_notifications_color$")
    var slack_footer_text = macro("$slack_footer_text$")
    var configuration = {
        "vars.slack_notifications_plugin_output_max_length" = plugin_output_max_length,
        "vars.slack_notifications_webhook_url" = slack_webhook_url,
        "vars.slack_notifications_channel" = slack_channel,
        "vars.slack_notifications_botname" = slack_botname,
        "vars.slack_notifications_icinga2_base_url" = icinga2_base_url
    }
    log(LogDebug, "slack-notifications", "Sending notification...read user configuration successfully: " + Json.encode(configuration))

    log(LogDebug, "slack-notifications", "Sending notification...reading notification data")
    var notification_type = macro("$notification.type$")
    var notification_author = macro("$notification.author$")
    var notification_comment = macro("$notification.comment$")
    var icinga_long_date_time = macro("$icinga.long_date_time$")
    var service_name = macro("$service.name$")
    var service_display_name = macro("$service.display_name$")
    var service_state = macro("$service.state$")
    var service_duration_sec = macro("$service.duration_sec$")
    var service_check_attempt = macro("$service.check_attempt$")
    var service_last_state = macro("$service.last_state$")
    var service_output = macro("$service.output$")
    var host_name = macro("$host.name$")
    var host_display_name = macro("$host.display_name$")
    var host_state = macro("$host.state$")
    var host_duration_sec = macro("$host.duration_sec$")
    var host_check_attempt = macro("$host.check_attempt$")
    var host_last_state = macro("$host.last_state$")
    var host_output = macro("$host.output$")
    var notification_data = {
        "notification.type" = notification_type,
        "notification.author" = notification_author,
        "notification.comment" = notification_comment,
        "icinga.long_date_time" = icinga_long_date_time,
        "service.name" = service_name,
        "service.display_name" = service_display_name,
        "service.state" = service_state,
        "service.check_attempt" = service_check_attempt,
        "service.last_state" = service_last_state,
	"service.duration_sec" = service_duration_sec,
        "service.output" = service_output,
        "host.name" = host_name,
        "host.display_name" = host_display_name,
        "host.state" = host_state,
        "host.check_attempt" = host_check_attempt,
        "host.last_state" = host_last_state,
	"host.duration_sec" = host_duration_sec,
        "host.output" = host_output,
    }
    log(LogDebug, "slack-notifications", "Sending notification...read notification data successfully: " + Json.encode(notification_data))

    log(LogDebug, "slack-notifications", "Sending notification...choosing color")
    var notification_type_custom_text = ""
    if (notification_type == "CUSTOM" || notification_type == "ACKNOWLEDGEMENT") {
	notification_type_custom_text = "\\n*Comment*: " + notification_comment + " by " + notification_author
    }


	function ReadableDuration(seconds){
	        if(seconds <= 60) {
                return Math.round(seconds) + " seconds"
        } else if(seconds <= 3600) {
                return Math.round(seconds / 60) + " minutes"
        } else if(seconds <= 86400) {
                return Math.round(seconds / 3600) + " hours"
        } else {
                return Math.round(seconds / 86400) + " days"
        }
	}

    log(LogDebug, "slack-notifications", "Sending notification...generating notification text")
    var host_name_with_link = "<" + icinga2_base_url + "/monitoring/host/show?host=" + host_name + "|" + host_display_name + ">"
    var text = "error crafting payload"
    var state_text = ""
    var state_duration = ""
    var service_details = ""

    if (service_name != null) { # Notification is for Service
	var color = slack_color.get(service_state)
        var service_name_with_link = "<" + icinga2_base_url + "/monitoring/service/show?host=" + host_name + "&service=" + service_name.replace(" ", "%20") + "|" + service_display_name + ">"
        var plugin_output = service_output.substr(0, plugin_output_max_length)
        var service_state_text = "Transitioned from " + service_last_state + " to " + service_state
	var fallback_text = notification_type + ": " + service_name + " is " + service_state + " on " + host_name
	var service_duration_readable = ReadableDuration(service_duration_sec)
        if(service_last_state == service_state) {
            state_text = "Is still in " + service_state
	    state_duration = "\\n*Duration:* " + service_duration_readable
        }
	service_details = "\\n*Service:* " + service_name_with_link
    } else { # Notification is for Host
	var color = slack_color.get(host_state)
        var host_state_text = "Transitioned from " + host_last_state + " to " + host_state
	var fallback_text = notification_type + ": " + host_name + " is " + host_state
	var host_duration_readable = ReadableDuration(host_duration_sec)
        if(host_last_state == host_state) {
            state_text = "Is still " + host_state
	    state_duration = "\\n*Duration:* " + host_duration_readable
	} 
	var plugin_output = host_output.substr(0, plugin_output_max_length)
    }
	plugin_output_escaped = plugin_output.replace("\"", "\\\"")
	payload_attachments = "{\"attachments\":[{\"fallback\":\"" + fallback_text + "\",\"mrkdwn\": true,\"color\":\"" + color + "\",\"title\":\"" + fallback_text + "\",\"text\": \"*Host:* " + host_name_with_link + service_details + "\\n*State:* " + state_text + state_duration + notification_type_custom_text + "\\n*Plugin output:* ```\\n" + plugin_output_escaped + "```\",\"footer\":\"" + slack_footer_text + "\"}]}"

    log(LogDebug, "slack-notifications", "Sending notification...generated notification text successfully: " + payload_attachments)

    log(LogDebug, "slack-notifications", "Generating notification command")

    var slack_payload = "payload=" + payload_attachments
    var payload_argument = escape_shell_arg(slack_payload)
    var slack_webhook_url_argument = escape_shell_arg(slack_webhook_url)
    var cmd = [
                "curl",
                "--fail",
                "--connect-timeout", "30",
                "--max-time", "60",
                "--silent", "--show-error",
                "-X", "POST",
                "--data-urlencode", payload_argument,
                slack_webhook_url_argument
    ]
    var notification_command = cmd.join(" ")
    log(LogDebug, "slack-notifications", "Generated notification command successfully: " + notification_command)

    return notification_command
  }}
}
